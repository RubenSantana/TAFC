#include <stdlib.h>
#include <string.h>
#include <stdio.h>
#include <math.h>
#include <mpi.h>
#include <assert.h>
#include <sys/time.h>

// Number of particles
static const int N = 16384;

// Number of iterations
static const int N_iter = 100;

// Timestep
static const double dt = 0.001;

// Softening factor
static const double soft = 1e-40;

// Timing routine based on gettimeofday
double get_wtime() {
  struct timeval tp;
  gettimeofday( &tp, NULL );
  return 1.0e-6 * tp.tv_usec + tp.tv_sec;
}

typedef struct {
  double *x, *y, *z;
  double *vx, *vy, *vz;
} t_particles;

/**
 * Initializes buffer values in array buffer with random values between 0.0 and 1.0,
 * inclusive
 * @param buffer [description]
 * @param size   [description]
 */
void init_rand01( double* const buffer, const int size ) {
  const double r_rand_max = 1.0/RAND_MAX;
   
  for( int i = 0; i < size; i ++)
    buffer[i] = rand() * r_rand_max;
}

void init_particles(t_particles* const particles, const int n_part) {

  printf("1\n");
  particles -> x  = (double *) malloc( n_part * sizeof(double) );
  particles -> y  = (double *) malloc( n_part * sizeof(double) );
  particles -> z  = (double *) malloc( n_part * sizeof(double) );
  particles -> vx = (double *) malloc( n_part * sizeof(double) );
  particles -> vy = (double *) malloc( n_part * sizeof(double) );
  particles -> vz = (double *) malloc( n_part * sizeof(double) );

  printf("Initializing %d particles...\n", n_part );
  printf("2\n");
  srand(0);

  assert(particles -> x != NULL);
  assert(particles -> y != NULL);
  assert(particles -> z != NULL);
  assert(particles -> vx != NULL);
  assert(particles -> vy != NULL);
  assert(particles -> vz != NULL);


	 
  init_rand01( particles ->  x, n_part );
  init_rand01( particles ->  y, n_part );
  init_rand01( particles ->  z, n_part );
  init_rand01( particles -> vx, n_part );
  init_rand01( particles -> vy, n_part );
  init_rand01( particles -> vz, n_part );

  printf("3\n");
  printf("Initialization complete.\n");
}

void cleanup_particles(t_particles* const particles){
  free( particles -> x);
  free( particles -> y);
  free( particles -> z);
  free( particles -> vx);
  free( particles -> vy);
  free( particles -> vz);
}

// Version 0
void advance_particles(t_particles* const particles, const int n_part, const double dt) {

  // Restrict pointers
  double* restrict x  = particles -> x;
  double* restrict y  = particles -> y;
  double* restrict z  = particles -> z;
  double* restrict vx = particles -> vx;
  double* restrict vy = particles -> vy;
  double* restrict vz = particles -> vz;

  // Advance velocities
  for( int i = 0; i < n_part; i++){
    double Fx, Fy, Fz;
    Fx = Fy = Fz = 0;
    for( int j = 0; j < n_part; j++) {
      const double dx = x[j] - x[i];
      const double dy = y[j] - y[i];
      const double dz = z[j] - z[i];

      // The softening (soft) value avoids a division by zero
      // if two particles happen to have the same position
      const double dr2 = dx*dx + dy*dy + dz*dz + soft;
      const double r_dr3 = 1.0 / (dr2 * sqrt(dr2));

      Fx += dx * r_dr3;
      Fy += dy * r_dr3;
      Fz += dz * r_dr3;
    }

    // Since m = 1, F = a
    vx[i] += Fx * dt;
    vy[i] += Fy * dt;
    vz[i] += Fz * dt;
  };

  // Advance positions
  for( int i = 0; i < n_part; i++){
    x[i] += vx[i] * dt;
    y[i] += vy[i] * dt;
    z[i] += vz[i] * dt;
  };
}

double kinetic_energy( t_particles* const particles, const int n_part){
  double energy = 0;		
  for(int i = 0; i < n_part; i++) {
    energy += particles->vx[i] * particles->vx[i] +
      particles->vy[i] * particles->vy[i] +
      particles->vz[i] * particles->vz[i];
  }

  return 0.5*energy;
}

int main (int argc, char *argv[])
{
  t_particles particles;
  int world_size,world_rank;
  MPI_Datatype MPI_t_particles;
  int blocklens[6];
  MPI_Aint indices[6];
  MPI_Datatype old_types[6];

  
  
  MPI_Init(&argc, &argv);
  MPI_Comm_rank(MPI_COMM_WORLD, &world_rank);
  MPI_Comm_size(MPI_COMM_WORLD, &world_size);
  


  int a=0;
  for (a=0;a++;a<6)
    {
      blocklens[a]=N;
      old_types[a]=MPI_DOUBLE;
    }
  
  MPI_Address(&particles.x,&indices[0]);
  MPI_Address(&particles.y,&indices[1]);
  MPI_Address(&particles.z,&indices[2]);
  MPI_Address(&particles.vx,&indices[3]);
  MPI_Address(&particles.vy,&indices[4]);
  MPI_Address(&particles.vz,&indices[5]);
  


  //disps[1] = int(&(a.m[0]) - (int*)&a)*sizeof(int);
  /*
  indices[5]=int(&(particles.x[0]) - (int*)&particles)*sizeof(int); 
  indices[4]= int(&(particles.y[0]) - (int*)&particles)*sizeof(int); 
  indices[3]=int(&(particles.z[0]) - (int*)&particles)*sizeof(int);
  indices[2]=int(&(particles.vx[0]) - (int*)&particles)*sizeof(int);
  indices[1]= int(&(particles.vy[0]) - (int*)&particles)*sizeof(int);
  indices[0]=0;
  */
  MPI_Type_struct(6,blocklens,indices,old_types,&MPI_t_particles);
  MPI_Type_commit(&MPI_t_particles);
 
  // Initialize particle positions and velocities
  if (world_rank==0)
    {
      init_particles( &particles, N );
      MPI_Bcast(&particles,N,MPI_t_particles,0,MPI_COMM_WORLD);
    }



  kinetic_energy( &particles, N );
   
  cleanup_particles(&particles);

MPI_Finalize();
return 0;
}
